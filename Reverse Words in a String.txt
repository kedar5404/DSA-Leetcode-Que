Question :151. Reverse Words in a String
Problem Statement : Given an input string s, reverse the order of the words.

A word is defined as a sequence of non-space characters. The words in s will be separated by at least one space.

Return a string of the words in reverse order concatenated by a single space.

Note that s may contain leading or trailing spaces or multiple spaces between two words. The returned string should only have a single space separating the words. Do not include any extra spaces.

 

Example 1:

Input: s = "the sky is blue"
Output: "blue is sky the"

Example 2:

Input: s = "  hello world  "
Output: "world hello"
Explanation: Your reversed string should not contain leading or trailing spaces.

Answer/Code : 
public class ReverseWords {
    public String reverseWords(String s) {
        // Trim leading and trailing spaces, then split the string by one or more spaces
        String[] words = s.trim().split("\\s+");
        
        // Use StringBuilder to reverse the words
        StringBuilder reversed = new StringBuilder();
        
        // Append words in reverse order
        for (int i = words.length - 1; i >= 0; i--) {
            reversed.append(words[i]);
            if (i != 0) {
                reversed.append(" ");
            }
        }
        
        return reversed.toString();
    }
    
    public static void main(String[] args) {
        ReverseWords rw = new ReverseWords();
        System.out.println(rw.reverseWords("the sky is blue"));         // Output: "blue is sky the"
        System.out.println(rw.reverseWords("  hello world  "));         // Output: "world hello"
    }
}
